apiVersion: v1
kind: Secret
metadata:
  name: redis-password
type: Opaque
data:
  password: c2VjcmV0
  
--- 
 
#
# Redis configuration file
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis.conf: |+
    requirepass secret

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-deployment
  template:
    metadata:
      labels:
        app: redis-deployment
    spec:
      containers:
      - image: redis:5.0.5
        imagePullPolicy: IfNotPresent
        name: redis
        command: ["redis-server"]
        args: ["/usr/local/etc/redis/redis.conf"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-password
              key: password        
        volumeMounts:
        - name: conf
          mountPath: /usr/local/etc/redis
          readOnly: false
        ports:
        - containerPort: 6379
          name: 6379tcp01
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - test "$(redis-cli --no-auth-warning -h $(hostname) -a $REDIS_PASSWORD ping)" == "PONG"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - test "$(redis-cli --no-auth-warning -h $(hostname) -a $REDIS_PASSWORD ping)" == "PONG"
          initialDelaySeconds: 20
          periodSeconds: 3    
      volumes:          
      - name: conf
        configMap:
          name: redis-config
          items: 
          - key: redis.conf
            path: redis.conf          

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: 6379tcp01
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis-deployment
  type: NodePort
status:
  loadBalancer: {}