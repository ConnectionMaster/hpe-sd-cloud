apiVersion: v1
kind: PersistentVolume
metadata:
  name: edb-data-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/edb-data-pvc"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: edb-data-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---

apiVersion: v1
kind: Secret
metadata:
  name: logintoken
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJjb250YWluZXJzLmVudGVycHJpc2VkYi5jb20iOiB7CgkJCSJhdXRoIjogIlpXNXlhWEYxWldjNmJUaGxSWGt6U0hJMGFWVklja2RGV2c9PSIKCQl9Cgl9LAoJIkh0dHBIZWFkZXJzIjogewoJCSJVc2VyLUFnZW50IjogIkRvY2tlci1DbGllbnQvMTkuMDMuMiAobGludXgpIgoJfQp9

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprisedb-deployment
  labels:
    app: enterprisedb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprisedb
  template:
    metadata:
      labels:
        app: enterprisedb
    spec:
      containers:
      - image: containers.enterprisedb.com/edb/edb-as-lite:v11
        imagePullPolicy: Always
        name: enterprisedb
        env:
        - name: DATABASE_NAME #EDB Database name
          value: "sa"
        - name: PGPORT #EDB port number
          value: "5432"
        - name: ENTERPRISEDB_PASSWORD #EDB admin user password
          value: "secret"
        - name: ACCEPT_EULA #EDB EULA acceptance terms
          value: "Yes" 
        ports:
        - containerPort: 5444 #port to connect to EDB
          name: 5444tcp01
        readinessProbe:
            exec:
              command:
              - /var/lib/edb/testIsReady.sh
            initialDelaySeconds: 60
            timeoutSeconds: 10 
        livenessProbe:
            exec:
              command:
              - /var/lib/edb/testIsHealthy.sh
            initialDelaySeconds: 300 
            timeoutSeconds: 60 
        volumeMounts:
          - name: edb-data 
            mountPath: /edbvolume
      volumes:
      - name: edb-data 
        persistentVolumeClaim:
          claimName: edb-data-pvc
      imagePullSecrets:
      - name: logintoken

---
apiVersion: v1
kind: Service
metadata:
  name: enterprisedb-nodeport
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: 5444tcp01 #port to connect to EDB
    nodePort: 30021
    port: 5444
    protocol: TCP
    targetPort: 5432
  selector:
    app: enterprisedb
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sdsp-primary-deployment
  labels:
    app: deployment-default-sdsp1
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment-default-sdsp1
  template:
    metadata:
      labels:
        app: deployment-default-sdsp1
    spec:
      containers:
      - image: hub.docker.hpecorp.net/cms-sd/sd-sp
        imagePullPolicy: IfNotPresent
        name: sdsp1
        env:
        - name: SDCONF_activator_db_vendor
          value: "EnterpriseDB"
        - name: SDCONF_activator_db_hostname
          value: enterprisedb-nodeport
        - name: SDCONF_activator_db_instance
          value: "sa"
        - name: SDCONF_activator_db_user
          value: "enterprisedb"
        - name: SDCONF_activator_db_password
          value: "secret"
        ports:
        - containerPort: 8080
          name: 8080tcp01
        livenessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh 
          initialDelaySeconds: 240
          periodSeconds: 15
        readinessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: 180
          periodSeconds: 15
      initContainers:
       - name: init-db
         image: busybox
         command: ['sh', '-c', 'until echo -e \035\nquit | telnet $(ENTERPRISEDB_NODEPORT_SERVICE_HOST) 5444; do echo waiting for enterprisedb; sleep 15; done; echo EDB connection open']
---
apiVersion: v1
kind: Service
metadata:
  name: sdsp1-nodeport
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: 8080tcp01
    nodePort: 32524
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: deployment-default-sdsp1
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sdui1-deployment
  labels:
    app: deployment-default-sdui
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment-default-sdui1
  template:
    metadata:
      labels:
        app: deployment-default-sdui1
    spec:
      containers:
      - image: hub.docker.hpecorp.net/cms-sd/sd-ui
        imagePullPolicy: IfNotPresent
        name: sdui1
        env:
        - name: SDCONF_sdui_async_host
          value: $(SDUI1_NODEPORT_SERVICE_HOST)
        - name: SDCONF_sdui_provision_host
          value: $(SDSP1_NODEPORT_SERVICE_HOST)
        - name: SDCONF_sdui_provision_password
          value: admin001
        - name: SDCONF_sdui_provision_port
          value: $(SDSP1_NODEPORT_SERVICE_PORT_8080TCP01)
        - name: SDCONF_sdui_provision_protocol
          value: http
        - name: SDCONF_sdui_provision_tenant
          value: UOC_SD
        - name: SDCONF_sdui_provision_use_real_user
          value: "no"
        - name: SDCONF_sdui_provision_username
          value: admin
        ports:
        - containerPort: 3000
          name: 3000tcp01
        livenessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh 
          initialDelaySeconds: 200
          periodSeconds: 10
        readinessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: 60
          periodSeconds: 10
      initContainers:
      - name: init-sp1
        image: busybox
        command: ['sh', '-c', 'until echo -e \035\nquit | telnet $(SDSP1_NODEPORT_SERVICE_HOST) 8080; do echo waiting for sdsp1; sleep 5; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: sdui1-nodeport
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: 3000tcp01
    nodePort: 32516
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: deployment-default-sdui1
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sdsp-secondary-deployment
  labels:
    app: deployment-default-sdsp2
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment-default-sdsp2
  template:
    metadata:
      labels:
        app: deployment-default-sdsp2
    spec:
      containers:
      - image: hub.docker.hpecorp.net/cms-sd/sd-sp
        imagePullPolicy: IfNotPresent
        name: sdsp2
        env:
        - name: SDCONF_activator_db_vendor
          value: "EnterpriseDB"
        - name: SDCONF_activator_db_hostname
          value: enterprisedb-nodeport
        - name: SDCONF_activator_db_instance
          value: "sa"
        - name: SDCONF_activator_db_user
          value: "enterprisedb"
        - name: SDCONF_activator_db_password
          value: "secret"
        - name: SDCONF_activator_node_primary
          value: "no"
        ports:
        - containerPort: 8080
          name: 8080tcp02
        livenessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh 
          initialDelaySeconds: 240
          periodSeconds: 15
        readinessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: 180
          periodSeconds: 15
      initContainers:
       - name: init-sdsp1
         image: busybox
         command: ['sh', '-c', 'until echo -e \035\nquit | telnet $(SDSP1_NODEPORT_SERVICE_HOST) 8080; do echo waiting for sdsp1; sleep 15; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: sdsp2-nodeport
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: 8080tcp02
    nodePort: 32515
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: deployment-default-sdsp2
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sdui2-deployment
  labels:
    app: deployment-default-sdui2
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment-default-sdui2
  template:
    metadata:
      labels:
        app: deployment-default-sdui2
    spec:
      containers:
      - image: hub.docker.hpecorp.net/cms-sd/sd-ui
        imagePullPolicy: IfNotPresent
        name: sdui2
        env:
        - name: SDCONF_sdui_async_host
          value: $(SDUI2_NODEPORT_SERVICE_HOST)
        - name: SDCONF_sdui_provision_host
          value: $(SDSP2_NODEPORT_SERVICE_HOST)
        - name: SDCONF_sdui_provision_password
          value: admin001
        - name: SDCONF_sdui_provision_port
          value: $(SDSP2_NODEPORT_SERVICE_PORT_8080TCP02)
        - name: SDCONF_sdui_provision_protocol
          value: http
        - name: SDCONF_sdui_provision_tenant
          value: UOC_SD
        - name: SDCONF_sdui_provision_use_real_user
          value: "no"
        - name: SDCONF_sdui_provision_username
          value: admin
        ports:
        - containerPort: 3000
          name: 3000tcp02
        livenessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: 200
          periodSeconds: 10
        readinessProbe:
          exec: 
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: 60
          periodSeconds: 10
      initContainers:
      - name: init-sp2
        image: busybox
        command: ['sh', '-c', 'until echo -e \035\nquit | telnet $(SDSP2_NODEPORT_SERVICE_HOST) 8080; do echo waiting for sdsp2; sleep 5; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: sdui2-nodeport
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: 3000tcp02
    nodePort: 32517
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: deployment-default-sdui2
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
