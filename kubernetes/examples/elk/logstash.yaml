---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: servicedirector
  labels:
    app: logstash
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    xpack.monitoring.elasticsearch.url: http://elasticsearch-service:9200
    xpack.monitoring.elasticsearch.username: elasticsearch
    xpack.monitoring.elasticsearch.password: changeme
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      redis {
        host => "redis-master.servicedirector.svc.cluster.local"
        password => "secret"
        type => "redis-input"
        data_type => "pattern_channel"
        port => "6379"
        key => "*"
        codec => plain { charset=>"ASCII-8BIT" }
      }        
    }

    filter {
      if [type] == "redis-input" {
        mutate {
            gsub => ["message", "^(.*)operation", "�operation"]
        }      
        mutate {
          gsub => [
            "message", "��", "�NULL�"
          ]
        } 
        mutate {
          gsub => [
            "message", "[^A-Za-z0-9_]�", "�NULL�"
          ]
        } 
        mutate {
          gsub => [
            "message", "�[^A-Za-z0-9_]", "�NULL�"
          ]
        }         
        mutate {
          gsub => [
            "message", "��", "�NULL�"
          ]
        } 
        mutate {
          gsub => [
            "message", "��NULL", "�NULL"
          ]
        }         
        mutate {
          gsub => [
            "message", "NULL�NULL", "NULL"
          ]
        }   
          
        kv{
          source => "message"
          field_split => "�"
          value_split => "�"
          allow_duplicate_values => false
        }
        date {
          match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
      }     
      if [type] == "wildfly" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loglevel}\s+\[(?<logger>[^\]]+)\] \((?<thread>.+?(?=\) ))\) %{GREEDYDATA:message}" }
            overwrite => [ "timestamp", "message" ]
        }
        date {
          match => [ "timestamp", "ISO8601" ]
        }
      }
      if [type] == "sa_mwfm" or [type] == "sa_resmgr"  or [type] == "snmp" {
        xml {
          source => "message"
          store_xml => false
          xpath => [
            "//LogEntry/@level", "loglevel",
            "//LogEntry/Time/text()", "timestamp",
            "//LogEntry/Module/text()", "logger",
            "//LogEntry/Part/text()", "part",
            "//LogEntry/Component/text()", "component",
            "//LogEntry/Topic/text()", "topic",
            "//LogEntry/Thread/text()", "thread",
            "//LogEntry/ID/text()", "jobid",
            "//LogEntry/Message/text()", "xmlmessage"
          ]
        }
        mutate {
          rename => {
            "xmlmessage" => "message"
          }
          gsub => [
            "loglevel", "WARNING", "WARN",
            "loglevel", "INFORMATIVE", "INFO",
            "loglevel", "DEBUG2", "TRACE",
            "timestamp", "," , ""
          ]
        }
        date {
          match => [ "[timestamp][0]" , "MMM dd yyyy HH:mm:ss a" ]
          locale => "en"
          target => timestamp
        }
      }
      if [type] == "uoc" {
        grok {
          match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{NOTSPACE:loglevel}\]\s+%{NOTSPACE:logger} - %{GREEDYDATA:message}" }
          overwrite => [ "timestamp", "message" ]
        }
        date {
          match => [ "timestamp", "ISO8601" ]
        }
      }
    }


    output {
      elasticsearch {
        hosts => ["elasticsearch-service:9200"]
        sniffing => false
        manage_template => false
        index => "%{[type]}-%{+YYYY.MM.dd}"
        document_type => "%{[@metadata][type]}"
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash-logging
  namespace: servicedirector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:6.8.3
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /usr/share/logstash/config
          name: config
        - mountPath: /usr/share/logstash/pipeline
          name: pipeline
      volumes:
      - name: config
        configMap:
          name: logstash-config
          items:
          - key: logstash.yml
            path: logstash.yml
      - name: pipeline
        configMap:
          name: logstash-config
          items:
          - key: logstash.conf
            path: logstash.conf

---
apiVersion: v1
kind: Service
metadata:
  name: logstash-service
  namespace: servicedirector
spec:
  type: NodePort
  ports:
  - port: 5044
    targetPort: 5044
    name: api
  selector:
    app: logstash
