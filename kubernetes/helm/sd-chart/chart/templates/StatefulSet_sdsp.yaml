{{- if and (gt (.Values.statefulset_sdsp.replicaCount | int) 0)  (not .Values.sdimage.install_assurance )  }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Values.statefulset_sdsp.name}}
  labels:
    app: {{.Values.statefulset_sdsp.app}}
  namespace: {{.Values.servicedirectorNamespace}}
spec:
  replicas: {{ .Values.statefulset_sdsp.replicaCount }}
  serviceName: {{.Values.statefulset_sdsp.servicename}}
  selector:
    matchLabels:
      app: {{.Values.statefulset_sdsp.app}}
  template:
    metadata:
      labels:
        app: {{.Values.statefulset_sdsp.app}}
    spec:
      containers:
      - image: "{{ .Values.statefulset_sdsp.image.repository | default .Values.sdimage.repository }}/{{ .Values.statefulset_sdsp.image.name }}:{{ .Values.statefulset_sdsp.image.tag | default .Values.sdimage.version }}"
        imagePullPolicy: {{ .Values.sdimage.pullPolicy }}
        name: {{.Values.statefulset_sdsp.servicename}}
        env:
        - name: SDCONF_activator_db_vendor
          value: "{{ .Values.sdimage.env.SDCONF_activator_db_vendor }}"
        - name: SDCONF_activator_db_hostname
          value: "{{ .Values.sdimage.env.SDCONF_activator_db_hostname }}"
        - name: SDCONF_activator_db_instance
          value: "{{ .Values.sdimage.env.SDCONF_activator_db_instance }}"
        - name: SDCONF_activator_db_user
          value: "{{ .Values.sdimage.env.SDCONF_activator_db_user }}"
        - name: SDCONF_activator_db_password
          valueFrom:
            secretKeyRef:
              key: "{{ .Values.sdimage.env.SDCONF_activator_db_password_key }}"            
              name: "{{ .Values.sdimage.env.SDCONF_activator_db_password_name }}"
        ports:
        - containerPort: {{ .Values.statefulset_sdsp.ports.containerPort }}
          name: {{ .Values.statefulset_sdsp.ports.name }}
        livenessProbe:
          exec:
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: {{ .Values.statefulset_sdsp.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.statefulset_sdsp.livenessProbe.periodSeconds }}
        readinessProbe:
          exec:
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: {{ .Values.statefulset_sdsp.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.statefulset_sdsp.readinessProbe.periodSeconds }}
        resources:
          requests:
            memory: {{ .Values.sdimage.memoryrequested }}
            cpu: {{ .Values.sdimage.cpurequested }}
          limits:
{{- if (.Values.sdimage.memorylimit ) }}                 
            memory: {{ .Values.sdimage.memorylimit }}
{{- end }}                  
{{- if (.Values.sdimage.cpulimit ) }} 
            cpu: {{ .Values.sdimage.cpulimit }} 
{{- end }}                     
{{- if  (.Values.licenseEnabled) }}
        lifecycle:
          postStart:
            exec:
              command:
                - /bin/sh
                - -c
                - cp /mnt/license /license
{{- end }}
        volumeMounts:
{{- if  (.Values.licenseEnabled) }}
        - name: sd-license
          mountPath: "/mnt"
          readOnly: true
{{- end }}
{{- if  or (.Values.prometheus.enabled) (.Values.elk.enabled)  }}
        - name: jboss-log
          mountPath: /opt/HP/jboss/standalone/log/
        - name: sa-log
          mountPath: /var/opt/OV/ServiceActivator/log/
        - name: snmp-log
          mountPath: /opt/sd-asr/adapter/log/
{{- end }}
{{- if  (.Values.prometheus.enabled)  }}
        - name: wfconfig
          mountPath: /etc/opt/OV/ServiceActivator/config/mwfm/config-selfmonitor.xml
          readOnly: true
          subPath: config.xml
        - name: alarms-log
          mountPath: /var/opt/OV/ServiceActivator/alarms/sd-sp-0/
{{- end }}


{{- if  (.Values.elk.enabled)  }}
        # needed to access additional informations about containers
        - name: filebeatconfig
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlog
          mountPath: /var/log/filebeat
{{- end }}

{{- if  (.Values.prometheus.enabled)  }}
      - name: grok-exporter
        image: "{{ include "grokrepository.fullpath" . }}"       
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        ports:
        - containerPort: 9144
          name: 9144tcp01
        resources:
          requests:
            memory: {{ .Values.sdimage.grokexporter.memoryrequested }}
            cpu: {{ .Values.sdimage.grokexporter.cpurequested }}
          limits:
{{- if (.Values.sdimage.grokexporter.memorylimit ) }}                 
            memory: {{ .Values.sdimage.grokexporter.memorylimit }}
{{- end }}                  
{{- if (.Values.sdimage.grokexporter.cpulimit ) }} 
            cpu: {{ .Values.sdimage.grokexporter.cpulimit }} 
{{- end }}       
{{- end }}
{{- if  (.Values.elk.enabled)  }}
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:6.5.2
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        resources:
          requests:
            memory: {{ .Values.sdimage.filebeat.memoryrequested }}
            cpu: {{ .Values.sdimage.filebeat.cpurequested }}
          limits:
{{- if (.Values.sdimage.filebeat.memorylimit ) }}                 
            memory: {{ .Values.sdimage.filebeat.memorylimit }}
{{- end }}                  
{{- if (.Values.sdimage.filebeat.cpulimit ) }} 
            cpu: {{ .Values.sdimage.filebeat.cpulimit }} 
{{- end }}           
{{- end }}
{{- if  or (.Values.prometheus.enabled) (.Values.elk.enabled)  }}
        volumeMounts:
        - name: jboss-log
          mountPath: /jboss-log
        - name: sa-log
          mountPath: /sa-log
          subPathExpr: $(POD_NAME)
        - name: snmp-log
          mountPath: /snmp-log
        # needed to access additional informations about containers
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
{{- end }}
{{- if  (.Values.prometheus.enabled)  }}
        - name: wfconfig
          mountPath: /etc/opt/OV/ServiceActivator/config/mwfm/config-selfmonitor.xml
          readOnly: true
          subPath: config.xml
        - name: alarms-log
          mountPath: /alarms-log
        - name: config
          mountPath: /grok/config.yml
          readOnly: true
          subPath: config.yml
{{- end }}

{{- if  (.Values.elk.enabled)  }}
        # needed to access additional informations about containers
        - name: filebeatconfig
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlog
          mountPath: /var/log/filebeat
{{- end }}

      volumes:
{{- if  (.Values.licenseEnabled) }}
      - name: sd-license
        secret:
          secretName: sd-license-secret
{{- end }}
{{- if  (.Values.prometheus.enabled)  }}
      - name: wfconfig
        configMap:
          defaultMode: 0644
          name: wf-config
      - name: config
        configMap:
          defaultMode: 0644
          name: grok-config
      - name: alarms-log
        emptyDir: {}
{{- end }}
{{- if  (.Values.elk.enabled)  }}
      - name: filebeatconfig
        configMap:
          defaultMode: 0644
          name: filebeat-config
      - name: varlog
        hostPath:
          path: /var/log/filebeat
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
{{- end }}
{{- if  or (.Values.elk.enabled)   (.Values.prometheus.enabled) }}
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: jboss-log
        emptyDir: {}
      - name: sa-log
        emptyDir: {}
      - name: snmp-log
        emptyDir: {}
{{- end }}
{{- end }}