{{- if and (gt (.Values.deployment_sdui_cl.replicaCount | int) 0) (.Values.sdimage.install_assurance ) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.deployment_sdui_cl.name}}
  labels:
    app: {{.Values.deployment_sdui_cl.app}}
  namespace: {{.Values.servicedirectorNamespace}}
spec:
  replicas: {{ .Values.deployment_sdui_cl.replicaCount }}
  selector:
    matchLabels:
      app: {{.Values.deployment_sdui_cl.app}}
  template:
    metadata:
      labels:
        app: {{.Values.deployment_sdui_cl.app}}
    spec:
      containers:
      - image: "{{ .Values.deployment_sdui_cl.image.repository | default .Values.sdimage.repository }}/{{ .Values.deployment_sdui_cl.image.name }}:{{ .Values.deployment_sdui_cl.image.tag | default .Values.sdimage.version }}"
        imagePullPolicy: {{ .Values.sdimage.pullPolicy }}
        name: {{.Values.deployment_sdui_cl.name}}
        env:
        - name: SDCONF_sdui_async_host
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SDCONF_sdui_provision_host
          value: "{{ .Values.service_sdcl.name }}"
        - name: SDCONF_sdui_provision_port
          value: "{{ .Values.service_sdcl.port }}"
        - name: SDCONF_sdui_provision_password
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_sdui_provision_password }}"
        - name: SDCONF_sdui_provision_protocol
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_sdui_provision_protocol }}"
        - name: SDCONF_sdui_provision_tenant
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_sdui_provision_tenant }}"
        - name: SDCONF_sdui_provision_use_real_user
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_sdui_provision_use_real_user }}"
        - name: SDCONF_sdui_provision_username
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_sdui_provision_username }}"
        - name: SDCONF_sdui_assurance_host
          value: "{{ .Values.service_sdcl.name }}"
        - name: SDCONF_sdui_install_assurance
          value: "{{ .Values.sdimage.install_assurance }}"
        - name: SDCONF_uoc_couchdb_host
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_uoc_couchdb_host }}"
        - name: SDCONF_uoc_couchdb_admin_username
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_uoc_couchdb_admin_username }}"
        - name: SDCONF_uoc_couchdb_admin_password
          value: "{{ .Values.deployment_sdui_cl.env.SDCONF_uoc_couchdb_admin_password }}"
        - name: SDCONF_sdui_redis
          value: "yes"
        - name: SDCONF_sdui_redis_host
          value: "{{ .Values.redis.fullnameOverride }}{{ printf "-master" }}"
        - name: SDCONF_sdui_redis_port
          value: "{{ .Values.redis.redisPort }}"
        - name: SDCONF_sdui_redis_password
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.redis.existingSecret }}"
              key: "{{ .Values.redis.existingSecretPasswordKey }}"
        ports:
        - containerPort: {{ .Values.deployment_sdui_cl.ports.containerPort }}
          name: {{ .Values.deployment_sdui_cl.ports.name }}
        livenessProbe:
          exec:
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: {{ .Values.deployment_sdui_cl.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.deployment_sdui_cl.livenessProbe.periodSeconds }}
        readinessProbe:
          exec:
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: {{ .Values.deployment_sdui_cl.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.deployment_sdui_cl.readinessProbe.periodSeconds }}
{{- if  (.Values.elk.enabled)  }}
        volumeMounts:
        - name: uoc-log
          mountPath: /var/opt/uoc2/logs
{{- end }}


{{- if  (.Values.elk.enabled)  }}
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:6.5.2
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        resources:
          requests:
            memory: "50Mi"
            cpu: 0.1
          limits:
            memory: "100Mi"
            cpu: 0.2
        volumeMounts:
        # needed to access additional informations about containers
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log/filebeat
        - name: uoc-log
          mountPath: /uoc-log
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: config
        configMap:
          defaultMode: 0644
          name: filebeat-config-ui
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log/filebeat
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
      - name: uoc-log
        emptyDir: {}
{{- end }}


      imagePullSecrets:
      - name: "{{ .Values.redis.existingSecret }}"
      
{{- end }}
{{- if and (gt (.Values.deployment_sdui.replicaCount | int) 0) (not .Values.sdimage.install_assurance ) }}
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.deployment_sdui.name}}
  labels:
    app: {{.Values.deployment_sdui.app}}
  namespace: {{.Values.servicedirectorNamespace}}
spec:
  replicas: {{ .Values.deployment_sdui.replicaCount }}
  selector:
    matchLabels:
      app: {{.Values.deployment_sdui.app}}
  template:
    metadata:
      labels:
        app: {{.Values.deployment_sdui.app}}
    spec:
      containers:
      - image: "{{ .Values.deployment_sdui.image.repository | default .Values.sdimage.repository }}/{{ .Values.deployment_sdui.image.name }}:{{ .Values.deployment_sdui.image.tag | default .Values.sdimage.version }}"
        imagePullPolicy: {{ .Values.sdimage.pullPolicy }}
        name: {{.Values.deployment_sdui.name}}
        env:
        - name: SDCONF_sdui_async_host
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SDCONF_sdui_provision_host
          value: "{{ .Values.service_sdsp.name }}"
        - name: SDCONF_sdui_provision_port
          value: "{{ .Values.service_sdsp.port }}"
        - name: SDCONF_sdui_provision_password
          value: "{{ .Values.deployment_sdui.env.SDCONF_sdui_provision_password }}"
        - name: SDCONF_sdui_provision_protocol
          value: "{{ .Values.deployment_sdui.env.SDCONF_sdui_provision_protocol }}"
        - name: SDCONF_sdui_provision_tenant
          value: "{{ .Values.deployment_sdui.env.SDCONF_sdui_provision_tenant }}"
        - name: SDCONF_sdui_provision_use_real_user
          value: "{{ .Values.deployment_sdui.env.SDCONF_sdui_provision_use_real_user }}"
        - name: SDCONF_sdui_provision_username
          value: "{{ .Values.deployment_sdui.env.SDCONF_sdui_provision_username }}"
        - name: SDCONF_sdui_install_assurance
          value: "{{ .Values.sdimage.install_assurance }}"
        - name: SDCONF_uoc_couchdb_host
          value: "{{ .Values.deployment_sdui.env.SDCONF_uoc_couchdb_host }}"
        - name: SDCONF_uoc_couchdb_admin_username
          value: "{{ .Values.deployment_sdui.env.SDCONF_uoc_couchdb_admin_username }}"
        - name: SDCONF_uoc_couchdb_admin_password
          value: "{{ .Values.deployment_sdui.env.SDCONF_uoc_couchdb_admin_password }}"
        - name: SDCONF_sdui_redis
          value: "yes"
        - name: SDCONF_sdui_redis_host
          value: "{{ .Values.redis.fullnameOverride }}{{ printf "-master" }}"
        - name: SDCONF_sdui_redis_port
          value: "{{ .Values.redis.redisPort }}"
        - name: SDCONF_sdui_redis_password
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.redis.existingSecret }}"
              key: "{{ .Values.redis.existingSecretPasswordKey }}"
{{- if  (.Values.elk.enabled)  }}
        volumeMounts:
        - name: uoc-log
          mountPath: /var/opt/uoc2/logs
{{- end }}

              
        ports:
        - containerPort: {{ .Values.deployment_sdui.ports.containerPort }}
          name: {{ .Values.deployment_sdui.ports.name }}
        livenessProbe:
          exec:
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: {{ .Values.deployment_sdui.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.deployment_sdui.livenessProbe.periodSeconds }}
        readinessProbe:
          exec:
            command:
              - /docker/healthcheck.sh
          initialDelaySeconds: {{ .Values.deployment_sdui.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.deployment_sdui.readinessProbe.periodSeconds }}
          

{{- if  (.Values.elk.enabled)  }}
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:6.5.2
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        resources:
          requests:
            memory: "50Mi"
            cpu: 0.1
          limits:
            memory: "100Mi"
            cpu: 0.2
        volumeMounts:
        # needed to access additional informations about containers
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log/filebeat
        - name: uoc-log
          mountPath: /uoc-log
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: config
        configMap:
          defaultMode: 0644
          name: filebeat-config-ui
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log/filebeat
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
      - name: uoc-log
        emptyDir: {}
{{- end }}          
          
      imagePullSecrets:
      - name: "{{ .Values.redis.existingSecret }}"
{{- end }}