{{- if ( .Values.healthcheck.enabled )  }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.healthcheck.name }}
  labels:
    app: {{.Values.healthcheck.app}}
    {{- range $key, $val := .Values.healthcheck.labels }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
  namespace: {{.Release.Namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.healthcheck.app }}
  template:
    metadata:
      labels:
        app: {{.Values.healthcheck.app}}
        {{- range $key, $val := .Values.healthcheck.podLabels }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
    spec:
      {{- if ( .Values.securityContext.enabled )  }}
      securityContext:
        fsGroup: {{ .Values.healthcheck.fsGroup | default .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.healthcheck.securityContext.runAsUser | default .Values.securityContext.runAsUser }}
      {{- end }}      
      {{- if (.Values.healthcheck.serviceaccount.enabled ) }}
      serviceAccountName:  {{.Values.healthcheck.serviceaccount.name}}
      {{- end }}   
      {{- if (.Values.automountServiceAccountToken.enabled) }}
      automountServiceAccountToken: true
      {{- else }}
      automountServiceAccountToken: false
      {{- end }}
      containers:
{{ include "sd-helm-chart.healthcheck.deployment.spec.template.containers.fluentdsd" . | indent 6 }}
      - image: "{{ template "healthcheck.fullpath" . }}"
        imagePullPolicy: {{ include "resolve.imagePullPolicy" (dict "top" . "specificPullPolicy" .Values.sdimages.pullPolicy) }}
        name: sd-healthcheck
        env:
        - name: sd_namespace
          value: {{.Release.Namespace}}
        - name: labels_unhealthy
          value:  "{{- range .Values.healthcheck.labelfilter.unhealthy }}{{ .  | printf "%s " }}{{ end }}"
        - name: labels_degraded
          value:  "{{- range .Values.healthcheck.labelfilter.degraded }}{{ .  | printf "%s " }}{{ end }}"
        - name: LOG_LEVEL
          value: "{{.Values.healthcheck.env.log_level}}"      
        - name: HTTPS_ENABLED
          value: "{{.Values.healthcheck.env.https_enabled}}"    
        ports:
        - containerPort: 8080
          protocol: TCP
          name: sd-healthcheck
        resources:
          requests:
            memory: {{.Values.healthcheck.resources.requests.memory}}
            cpu: {{.Values.healthcheck.resources.requests.cpu}}
          limits:
{{- if (.Values.healthcheck.resources.limits.memory ) }}
            memory: {{ .Values.healthcheck.resources.limits.memory }}
{{- end }}
{{- if (.Values.healthcheck.resources.limits.cpu) }}
            cpu: {{ .Values.healthcheck.resources.limits.cpu }}
{{- end }}
        readinessProbe:
          httpGet:
            path: /health
{{- if  (.Values.healthcheck.env.https_enabled)  }}                         
            scheme: HTTPS
{{- end }}            
            port: sd-healthcheck
          failureThreshold: {{ .Values.healthcheck.readinessProbe.failureThreshold }}
          periodSeconds: {{ .Values.healthcheck.readinessProbe.periodSeconds }}
        livenessProbe:
          tcpSocket:
            port: sd-healthcheck
          initialDelaySeconds: {{ .Values.healthcheck.livenessProbe.initialDelaySeconds }}
          failureThreshold: {{ .Values.healthcheck.livenessProbe.failureThreshold }}
          periodSeconds: {{ .Values.healthcheck.livenessProbe.periodSeconds }}
        startupProbe:
          httpGet:
            path: /health
{{- if  (.Values.healthcheck.env.https_enabled)  }}                  
            scheme: HTTPS
{{- end }}     
            port: sd-healthcheck
          failureThreshold: {{ .Values.healthcheck.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.healthcheck.startupProbe.periodSeconds }}         
        volumeMounts:
        - name: keystore
          mountPath: "/var/opt/hpe/"
          readOnly: true        
        - mountPath: /var/log4j2/
          name: log4j2-config
        - mountPath: /var/response/
          name: response-config-hc
      volumes:
      - name: keystore
        secret:
          secretName: keystoresecret      
{{ include "sd-helm-chart.healthcheck.deployment.spec.template.containers.volumes" . | indent 6 }}  
{{- end }}
---
{{- if ( .Values.healthcheck.enabled )  }}
apiVersion: v1
kind: Service
metadata:
  name: sd-healthcheck
  namespace: {{ .Release.Namespace}}
  labels:
  {{- range $key, $val := .Values.healthcheck.serviceLabels }}
    {{ $key }}: {{ $val | quote }}
  {{- end }}
spec:
  type: {{ .Values.service_healthcheck.servicetype | quote }}
  ports:
  - name: entrypoint
    port: 8080
    protocol: TCP
    targetPort: 8080
  {{- if and (eq .Values.service_healthcheck.servicetype "NodePort") (not (empty .Values.service_healthcheck.nodePort)) }}
    nodePort: {{ .Values.service_healthcheck.nodePort }}
  {{- end }}
  selector:
    app: sd-healthcheck
  sessionAffinity: ClientIP
  {{- end }}

{{/*
Healthcheck spec template container fluentd helper
*/}}
{{- define "sd-helm-chart.healthcheck.deployment.spec.template.containers.fluentdsd" -}}
{{- if and (or (eq (include "prometheus.enabled" .) "true") (eq (include "efk.enabled" .) "true")) (.Values.efk.fluentd.enabled) }}
- name: fluentd
  image: "{{ include "fluentd.fullpath" . }}"
  imagePullPolicy: {{ include "resolve.imagePullPolicy" (dict "top" . "specificPullPolicy" "") }}
  env:
  - name: POD_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.name
  - name: FLUENTD_CONF
    value: fluentd.conf
  - name: FLUENTD_OPT
  ports:
  - containerPort: 24224
    name: tcp
    protocol: TCP
  - containerPort: 9880
    name: http
    protocol: TCP
  - containerPort: 24231
    name: metrics
{{- if and ( eq (include "prometheus.enabled" .) "true") ( .Values.efk.fluentd.enabled ) }}
  - containerPort: 5140
    name: syslog
    protocol: TCP
{{- end }}
  resources:
    requests:
      memory: {{ .Values.fluentd.memoryrequested }}
      cpu: {{ .Values.fluentd.cpurequested }}
    limits:
      {{- if (.Values.fluentd.memorylimit) }}
      memory: {{ .Values.fluentd.memorylimit }}
      {{- end }}
      {{- if (.Values.fluentd.cpulimit) }}
      cpu: {{ .Values.fluentd.cpulimit }}
      {{- end }}
  volumeMounts:
{{- if and (or (eq (include "efk.enabled" .) "true") (eq (include "prometheus.enabled" .) "true")) (.Values.efk.fluentd.enabled) (.Values.healthcheck.enabled) }}
  - mountPath: /opt/bitnami/fluentd/conf/
    name: fluentd-config-hc
  - mountPath: /opt/bitnami/fluentd/logs/buffers
    name: buffer
{{- end }}
{{- end }}
{{- end -}}

{{/*
Healthcheck spec template container volumes helper
*/}}
{{- define "sd-helm-chart.healthcheck.deployment.spec.template.containers.volumes" -}}
- name: response-config-hc
  configMap:
    defaultMode: 420
    name: response-config-hc
- name: log4j2-config
  configMap:
    defaultMode: 420
    name: log4j2-config
{{- if and (or (eq (include "efk.enabled" .) "true") (eq (include "prometheus.enabled" .) "true")) (.Values.efk.fluentd.enabled) (.Values.healthcheck.enabled) }}
- name: fluentd-config-hc
  configMap:
    defaultMode: 420
    name: fluentd-config-hc
- name: buffer
  emptyDir: {}
{{- end }}
{{- end -}}