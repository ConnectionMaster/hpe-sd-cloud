{{- if  and  (.Values.prometheus.enabled)  (.Values.prometheus.server_enabled) (.Values.prometheus.grafana.enabled) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  {{- if (.Values.monitoringNamespace) }}
  namespace: {{.Values.monitoringNamespace}}
  {{- end }} 
spec:
  replicas: 1
  serviceName: grafana
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - image: grafana/grafana
          name: grafana
          ports:
            - containerPort: 3000
              protocol: TCP
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  wget -qO - http://prometheus-service:8080/-/ready
            failureThreshold: 10
            periodSeconds: 20
          livenessProbe:
            exec:
               command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  wget -qO - http://prometheus-service:8080/-/ready
            failureThreshold: 5
            periodSeconds: 10
          readinessProbe:
            exec:
               command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  wget -qO - http://prometheus-service:8080/-/ready
            failureThreshold: 5
            periodSeconds: 10
          resources:
            requests:
              memory: {{.Values.prometheus.grafana.memoryrequested}}
              cpu: {{.Values.prometheus.grafana.cpurequested}}
            limits:
{{- if (.Values.prometheus.grafana.memorylimit ) }}                 
              memory: {{ .Values.prometheus.grafana.memorylimit }}
{{- end }}                  
{{- if (.Values.prometheus.grafana.cpulimit ) }} 
              cpu: {{ .Values.prometheus.grafana.cpulimit }} 
{{- end }}             
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: data
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources/all.yaml
              readOnly: true
              subPath: all.yaml
            - name: dashboards
              mountPath: /etc/grafana/provisioning/dashboards/all.yaml
              readOnly: true
              subPath: all.yaml
            - name: kubemetrics
              mountPath: /var/lib/grafana/Kubernetes-SP-metrics.json
              readOnly: true
              subPath: Kubernetes-SP-metrics.json
            - name: selfmonitor
              mountPath: /var/lib/grafana/SA-Self-Monitoring-metrics.json
              readOnly: true
              subPath: SA-Self-Monitoring-metrics.json
{{- if  (.Values.redis.metrics.enabled)  }}
            - name: redismetrics
              mountPath: /var/lib/grafana/Redis-metrics.json
              readOnly: true
              subPath: Redis-metrics.json
{{- end }}
      restartPolicy: Always
      volumes:
        - name: data
          emptyDir: {}
        - name: datasources
          configMap:
            defaultMode: 0644
            name: datasources
        - name: dashboards
          configMap:
            defaultMode: 0644
            name: dashboards
        - name: kubemetrics
          configMap:
            defaultMode: 0644
            name: kubemetrics
        - name: selfmonitor
          configMap:
            defaultMode: 0644
            name: selfmonitor
{{- if  (.Values.redis.metrics.enabled)  }}
        - name: redismetrics
          configMap:
            defaultMode: 0644
            name: redismetrics
{{- end }}

{{- end }}
