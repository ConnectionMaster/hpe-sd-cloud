{{- if  (eq (include "prometheus.enabled" .) "true") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: {{ template "monitoring.namespace" . }}
data:
  prometheus.yml: |-
    global:
      scrape_interval: 30s
      evaluation_interval: 30s
      scrape_timeout: 25s

{{- if  (.Values.prometheus.alertmanager_enabled)  }}

    alerting:
       alertmanagers:
          - scheme: http
            static_configs:
            - targets:
              - 'alertmanager.{{ template "monitoring.namespace" . }}.svc:9093'

    rule_files:
      - /alerts/sdalerts.yml

{{- end }}

    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['sd-kube-state-metrics:8080']

      - job_name: kubernetes-nodes-cadvisor
        scrape_interval: 10s
        scrape_timeout: 10s
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          # Only for Kubernetes ^1.7.3.
          # See: https://github.com/prometheus/prometheus/issues/2916
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        metric_relabel_configs:
          - action: replace
            source_labels: [id]
            regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
            target_label: rkt_container_name
            replacement: '${2}-${1}'
          - action: replace
            source_labels: [id]
            regex: '^/system\.slice/(.+)\.service$'
            target_label: systemd_service_name
            replacement: '${1}'

      - job_name: 'fluentd'
        static_configs:
{{- if (.Values.install_assurance )  }}
        - targets: ['{{.Values.service_sdcl.name}}-prometheus.{{ .Release.Namespace }}.svc.cluster.local:9144']
{{- else }}
        - targets: ['{{.Values.service_sdsp.name}}-prometheus.{{ .Release.Namespace }}.svc.cluster.local:9144']
{{- end }}

      - job_name: 'sp'
        metrics_path: /metrics/application
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            {{- if .Values.install_assurance }}
            {{- if not (.Values.sdimage.metrics.proxy_enabled) }}
            regex: '{{ .Release.Namespace }};{{.Values.service_sdcl.name}}-prometheus;9990tcp01'
            # if and ((.Values.install_assurance) (.Values.sdimage.metrics.proxy_enabled))
            {{- else }}
            regex: '{{ .Release.Namespace }};{{.Values.service_sdcl.name}}-prometheus;9991tcp01'
            {{- end }}
            {{- else }}
            {{- if not (.Values.sdimage.metrics.proxy_enabled) }}
            regex: '{{ .Release.Namespace }};{{.Values.service_sdsp.name}}-prometheus;9990tcp01'
            # if and ((not (.Values.install_assurance)) (.Values.sdimage.metrics.proxy_enabled))
            {{- else }}
            regex: '{{ .Release.Namespace }};{{.Values.service_sdsp.name}}-prometheus;9991tcp01'
            {{- end }}
            {{- end }}
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: hostname
{{- if and (.Values.kafka.metrics.kafka.enabled ) ( .Values.kafka.metrics.jmx.enabled )  }}
      - job_name: 'kafka'
        static_configs:
          - targets: ['{{ .Values.kafka.fullnameOverride }}-metrics.{{ .Release.Namespace }}.svc.cluster.local:9308']
{{- end }}
{{- if (.Values.kafka.zookeeper.metrics.enabled )  }}
      - job_name: 'zookeeper'
        static_configs:
        - targets: ['{{ .Values.kafka.zookeeper.fullnameOverride }}-exporter.{{ .Release.Namespace }}.svc.cluster.local:9141']
{{- end }}
{{- if (.Values.redis.metrics.enabled )  }}
      - job_name: 'redis'
        metrics_path: /metrics
        scheme: http
        tls_config:
          insecure_skip_verify: true
        static_configs:
          - targets: ["{{ .Values.redis.fullnameOverride }}-metrics.{{ .Release.Namespace }}.svc.cluster.local:9121"]
{{- end }}
{{- if (.Values.healthcheck.metrics.enabled )  }}
      - job_name: 'healthcheck'
        metrics_path: /prometheus
        scheme: http
        tls_config:
          insecure_skip_verify: true
        static_configs:
          - targets: ["{{ .Values.healthcheck.name }}.{{ .Release.Namespace }}.svc.cluster.local:8080"]
{{- end }}
{{- end }}
