# SD-SP, SD-CL
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
{{- if (.Values.install_assurance) }}
  name: {{.Values.statefulset_sdcl.name}}
{{- else }}
  name: {{.Values.statefulset_sdsp.name}}
{{- end }}
{{ include "sd-helm-chart.sdsp.statefulset.metadata" . | indent 2 }}
spec:
{{- if (.Values.install_assurance) }}
  replicas: {{ .Values.statefulset_sdcl.replicaCount }}
  serviceName: headless-{{ .Values.service_sdcl.name }}
{{- else }}
  replicas: {{ .Values.statefulset_sdsp.replicaCount }}
  serviceName: headless-{{ .Values.service_sdsp.name }}
{{- end }}
{{ include "sd-helm-chart.sdsp.statefulset.spec" . | indent 2 }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ template "sd-cl.serviceAccount" . }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.sdimage.securityContext.runAsUser | default .Values.securityContext.runAsUser }}
      {{- end }}
      affinity: {{- include "sd.templateValue" ( dict "value" .Values.sdimage.affinity "context" $ ) | nindent 8 }}
      topologySpreadConstraints: {{- include "sd.templateValue" ( dict "value" .Values.sdimage.topologySpreadConstraints "context" $ ) | nindent 8 }}
      containers:
{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.sd" . | indent 6 }}
        env:
        {{- if not (.Values.install_assurance) }}
        - name: SDCONF_install_asr
          value: "no"
        {{- else if (not (.Values.kafka.enabled)) }}
        - name: SDCONF_install_asr
          value: "yes"
        - name: SDCONF_install_asr_kafka
          value: "no"
        # if and (.Values.install_assurance) (.Values.kafka.enabled))
        {{- else }}
        - name: SDCONF_install_asr
          value: "yes"
        - name: SDCONF_install_asr_kafka
          value: "yes"
        {{- end }}
        {{- if (.Values.statefulset_sdcl.dedicated_asr_node) }}
        - name: SDCONF_asr_node
          value: "no"
        {{- else }}
        - name: SDCONF_asr_node
          value: "yes"
        {{- end }}
        - name: SDCONF_asr_only_node
          value: "no"

{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.sd.env" . | indent 8 }}
{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.fluentdsd" . | indent 6 }}
{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.envoy" . | indent 6 }}
      volumes:
{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.volumes" . | indent 6 }}

{{- if and (.Values.statefulset_sdcl.dedicated_asr_node) (.Values.install_assurance ) }}
# SD-CL-ASR-ONLY
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Values.statefulset_sdcl.name_asr_only}}
{{ include "sd-helm-chart.sdsp.statefulset.metadata" . | indent 2 }}
spec:
  replicas: {{ .Values.statefulset_sdcl.replicaCount_asr_only }}
  serviceName: {{.Values.statefulset_sdcl.servicename_asr_only}}
{{ include "sd-helm-chart.sdsp.statefulset.spec" . | indent 2 }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ template "sd-cl.serviceAccount" . }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.sdimage.securityContext.runAsUser | default .Values.securityContext.runAsUser }}
      {{- end }}
      containers:
{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.sd" . | indent 6 }}
        env:
        - name: SDCONF_install_asr
          value: "yes"
        - name: SDCONF_asr_node
          value: "yes"
        - name: SDCONF_asr_only_node
          value: "yes"

        {{- if (not (.Values.kafka.enabled)) }}
        - name: SDCONF_install_asr_kafka
          value: "no"
        {{- else }}
        - name: SDCONF_install_asr_kafka
          value: "yes"
        {{- end }}

{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.sd.env" . | indent 8 }}
{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.fluentdsd" . | indent 6 }}
      volumes:
{{ include "sd-helm-chart.sdsp.statefulset.spec.template.containers.volumes" . | indent 6 }}
{{- end }}

---
{{- if .Values.sdimage.metrics.proxy_enabled }}
{{- if or (eq (include "prometheus.enabled" .) "true") (.Values.sdimage.metrics.enabled) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-metrics
  namespace: {{.Release.Namespace | quote }}
data:
  envoy.yaml: |-
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address: { address: 0.0.0.0, port_value: 9991 }
        filter_chains:
          filters:
          - name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_https
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
                  path: "/dev/stdout"
              http_filters:
              - name: envoy.router
              route_config:
                virtual_hosts:
                - name: backend
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/metrics" }
                    route: { cluster: sd_cluster }
                  - match: { prefix: "/health" }
                    route: { cluster: sd_cluster }

      clusters:
      - name: sd_cluster
        connect_timeout: 5s
        type: strict_dns
        lb_policy: round_robin
        load_assignment:
          cluster_name: sd_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 9990
{{- end }}
{{- end }}

#Configmap for SA SelfMonitoring module
---
{{- if or (eq (include "prometheus.enabled" .) "true") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: wf-config
  namespace: {{.Release.Namespace}}
data:
  config.xml: |
    <?xml version="1.0" encoding="utf-8" ?>
    <!DOCTYPE Engine SYSTEM "solutionmwfm.dtd">
    <Engine>
      <Module>
        <Name>self_monitoring</Name>
        <Class-Name>com.hp.ov.activator.mwfm.engine.module.SelfMonitoringModule</Class-Name>
        <Param name="poll_interval" value="10000"/>
        <Param name="threshold_percent_heap_size" value="80"/>
        <Param name="threshold_percent_maxworklistlength" value="1"/>
        <Param name="send_snmp_trap" value="true"/>
        <Param name="snmp_module" value="snmp_sender"/>
        <Param name="log_alarm" value="false"/>
        <Param name="audit_events" value="true"/>
        <Param name="granularities" value="1,5,30,240,1440,10080"/>
        <Param name="samples" value="360"/>
        <Param name="wildfly_metrics" value="true"/>
      </Module>
    </Engine>
{{- end }}

