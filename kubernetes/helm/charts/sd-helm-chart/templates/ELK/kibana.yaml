{{- if  and (eq (include "elk.enabled" .) "true")  (.Values.elk.elastic.enabled)  (.Values.elk.kibana.enabled)  }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: {{ template "monitoring.namespace" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
    {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
    {{- end }}
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:{{.Values.elk.version}}
        imagePullPolicy: {{.Values.elk.pullPolicy}}
        env:
          - name: ELASTICSEARCH_HOSTS
            value: http://elasticsearch-service:9200
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /app/kibana
            port: ui
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        readinessProbe:
          httpGet:
            path: /app/kibana
            port: ui
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          requests:
            memory: {{.Values.elk.kibana.memoryrequested}}
            cpu: {{.Values.elk.kibana.cpurequested}}
          limits:
{{- if (.Values.elk.kibana.memorylimit ) }}                 
            memory: {{ .Values.elk.kibana.memorylimit }}
{{- end }}                  
{{- if (.Values.elk.kibana.cpulimit ) }} 
            cpu: {{ .Values.elk.kibana.cpulimit }} 
{{- end }}           
{{- end }}
---
{{- if  and (eq (include "elk.enabled" .) "true")  (.Values.elk.elastic.enabled)  (.Values.elk.kibana.enabled)  }}
apiVersion: v1
kind: Service
metadata:
  name: kibana-service
  namespace: {{ template "monitoring.namespace" . }}
  labels:
    app: kibana-service
spec:
  type: {{ .Values.elk.kibana.servicetype | quote }}
  {{- if and (eq .Values.elk.kibana.servicetype "LoadBalancer") (not (empty .Values.elk.kibana.loadBalancerIP)) }}
  loadBalancerIP: {{ .Values.elk.kibana.loadBalancerIP }}
  {{- end }}  
  ports:
  - port: 5601
    targetPort: 5601
    {{- if and (or (eq .Values.elk.kibana.servicetype "NodePort") (eq .Values.elk.kibana.servicetype "LoadBalancer")) (not (empty .Values.elk.kibana.nodePort)) }}
    nodePort: {{ .Values.elk.kibana.nodePort }}
    {{- end }}    
    name: 5601tcp01 #port to connect to Kibana
  selector:
    app: kibana
{{- end }}
